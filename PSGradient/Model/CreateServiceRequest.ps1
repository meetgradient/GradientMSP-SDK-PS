#
# API Documentation
# Howdy! Looks like you've found our open API documentation! Take a gander, and while you're at it feel free to take some endpoints for a spin.
# Version: 1.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER SupportArticle
No description available.
.PARAMETER SupportContact
No description available.
.PARAMETER Category
No description available.
.PARAMETER Subcategory
No description available.
.OUTPUTS

CreateServiceRequest<PSCustomObject>
#>

function Initialize-PSCreateServiceRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SupportArticle},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SupportContact},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("security", "backup", "productivity", "infrastructure", "service delivery", "consulting", "other", IgnoreCase = $false)]
        [String]
        ${Category},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("endpoint detection and response (EDR)", "email security", "virtual private network services (VPN)", "DNS filtering", "dark web monitoring", "password management", "single sign on (SSO)", "priviledged access and identity management (PAM/PIM)", "security information and event management (SIEM)", "mobile device management (MDM)", "application security", "mobile application management (MAM)", "multi factor authentication (MFA)", "cloud backup", "local backup", "desktop backup", "data archiving", "physical offsite storage", "business continuity", "hosted email", "video conferencing", "voice over IP services (VOIP)", "line of business application support", "unified communications as a service (UCaaS)", "customer relationship management", "cloud storage", "website hosting", "hardware as a service (HaaS)", "managed print services", "virtual desktop infrastructure (VDI)", "virtual server hosting", "infrastructure as a service (IaaS)", "end user support", "server management and support", "network management and support", "printer management and support", "desktop management and support", "hosted security operations centre (SOC)", "software development", "penetration testing", "project services", "governance and compliance", "business intelligence services / analytics", "phishing simulation", "privacy and security awareness training", "other", IgnoreCase = $false)]
        [String]
        ${Subcategory}
    )

    Process {
        'Creating PSCustomObject: PSGradient => PSCreateServiceRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $Description) {
            throw "invalid value for 'Description', 'Description' cannot be null."
        }

        if ($null -eq $Category) {
            throw "invalid value for 'Category', 'Category' cannot be null."
        }

        if ($null -eq $Subcategory) {
            throw "invalid value for 'Subcategory', 'Subcategory' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "supportArticle" = ${SupportArticle}
            "supportContact" = ${SupportContact}
            "category" = ${Category}
            "subcategory" = ${Subcategory}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateServiceRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateServiceRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateServiceRequest<PSCustomObject>
#>
function ConvertFrom-PSJsonToCreateServiceRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSGradient => PSCreateServiceRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSCreateServiceRequest
        $AllProperties = ("name", "description", "supportArticle", "supportContact", "category", "subcategory")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) {
            throw "Error! JSON cannot be serialized due to the required property 'description' missing."
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "category"))) {
            throw "Error! JSON cannot be serialized due to the required property 'category' missing."
        } else {
            $Category = $JsonParameters.PSobject.Properties["category"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subcategory"))) {
            throw "Error! JSON cannot be serialized due to the required property 'subcategory' missing."
        } else {
            $Subcategory = $JsonParameters.PSobject.Properties["subcategory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "supportArticle"))) { #optional property not found
            $SupportArticle = $null
        } else {
            $SupportArticle = $JsonParameters.PSobject.Properties["supportArticle"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "supportContact"))) { #optional property not found
            $SupportContact = $null
        } else {
            $SupportContact = $JsonParameters.PSobject.Properties["supportContact"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "supportArticle" = ${SupportArticle}
            "supportContact" = ${SupportContact}
            "category" = ${Category}
            "subcategory" = ${Subcategory}
        }

        return $PSO
    }

}

