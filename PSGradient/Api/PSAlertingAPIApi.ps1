#
# API Documentation
# Howdy! Looks like you've found our open API documentation! Take a gander, and while you're at it feel free to take some endpoints for a spin.
# Version: 1.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

Add a alert to the alerting queue

.DESCRIPTION

No description available.

.PARAMETER AccountId
No description available.

.PARAMETER CreateAlertingDto
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

AlertCreatedDto
#>
function Invoke-PSAlertingControllerDispatchAlert {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AccountId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${CreateAlertingDto},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-PSAlertingControllerDispatchAlert' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-PSConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json')

        $LocalVarUri = '/api/vendor-api/alerting/{accountId}'
        if (!$AccountId) {
            throw "Error! The required parameter `AccountId` missing when calling alertingControllerDispatchAlert."
        }
        $LocalVarUri = $LocalVarUri.replace('{accountId}', [System.Web.HTTPUtility]::UrlEncode($AccountId))

        if (!$CreateAlertingDto) {
            throw "Error! The required parameter `CreateAlertingDto` missing when calling alertingControllerDispatchAlert."
        }

        $LocalVarBodyParameter = $CreateAlertingDto | ConvertTo-Json -Depth 100

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Gradient-Token"]) {
            $LocalVarHeaderParameters['Gradient-Token'] = $Configuration["ApiKey"]["Gradient-Token"]
            Write-Verbose ("Using API key 'Gradient-Token' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-PSApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "AlertCreatedDto" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

Checks if a ticket created is from the sent alert

.DESCRIPTION

No description available.

.PARAMETER MessageId
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RetrieveAlertResponseDto
#>
function Invoke-PSAlertingControllerGetTicketByIdDebug {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${MessageId},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-PSAlertingControllerGetTicketByIdDebug' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-PSConfiguration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/vendor-api/alerting/debug/{messageId}'
        if (!$MessageId) {
            throw "Error! The required parameter `MessageId` missing when calling alertingControllerGetTicketByIdDebug."
        }
        $LocalVarUri = $LocalVarUri.replace('{messageId}', [System.Web.HTTPUtility]::UrlEncode($MessageId))

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Gradient-Token"]) {
            $LocalVarHeaderParameters['Gradient-Token'] = $Configuration["ApiKey"]["Gradient-Token"]
            Write-Verbose ("Using API key 'Gradient-Token' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-PSApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RetrieveAlertResponseDto" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

